{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Board.svelte","../../src/Congrats.svelte","../../src/ControlsButton.svelte","../../src/helpers.js","../../src/Controls.svelte","../../src/Stats.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    let unsubscribe;\n    if (is_crossorigin()) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        detach(iframe);\n        if (unsubscribe)\n            unsubscribe();\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next, lookup.has(block.key));\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.22.3' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\n  import { getContext } from 'svelte';\n\n  export let tiles;\n  \n  let updateState = getContext('updateState');\n\n  const getSortedTiles = (tiles) => {\n    const sortedTiles = [];\n\n    tiles.forEach((rowTiles, y) => {\n      rowTiles.forEach((number, x) => {\n        sortedTiles[number] = [y, x];\n      });\n    });\n\n    return sortedTiles;\n  }\n\n  $: cols = tiles[0].length;\n  $: rows = tiles.length;\n  $: sortedTiles = getSortedTiles(tiles);\n</script>\n\n<div class='board-wrapper'>\n  <svg\n    class=\"board\"\n    width=\"100%\"\n    height=\"100%\"\n    viewBox={`0 0 ${cols * 24} ${rows * 24}`}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    {#each sortedTiles as pos, tileName}\n      {#if tileName !== 0}\n        <g\n          class=\"tile\"\n          on:click={() => { updateState('move', tileName); }}\n          key={tileName} \n          transform={`translate(${pos[1] * 24}, ${pos[0] * 24})`}\n        >\n          <rect\n            height=\"22\"\n            width=\"22\"\n            stroke-width=\"0\"\n            x=\"1\"\n            y=\"1\"\n          />\n          <text\n            font-size=\"12\"\n            transform={`translate(12, 16)`}\n            text-anchor=\"middle\"\n          >\n            {tileName}\n          </text>\n        </g>\n      {/if}\n    {/each}\n  </svg>\n</div>\n\n<style>\n  .board-wrapper {\n    height: calc(100% - 6rem);\n    padding: 2rem;\n  }\n\n  .board .tile {\n    cursor: pointer;\n  }\n\n  .board .tile rect {\n    fill: #3F51B5;\n  }\n\n  .board .tile text {\n    fill: #cfd5f7;\n  }\n\n  .board .tile, .board {\n    transition: all .15s cubic-bezier(1, 0, 0, 1)\n  }\n\n  @media all and (max-width: 768px) {\n    .board-wrapper {\n      padding: 1rem;\n    }\n  }\n\n  @media (pointer: fine) {\n    .board .tile:hover rect {\n      fill: #475bca;\n    }  \n  }\n\n  @media (pointer: coarse) {\n    .board .tile:active rect {\n      fill: #475bca;\n    } \n  }\n</style>","<script>\n  import { getContext, onMount } from 'svelte';\n  \n  export let tiles;\n\n  let updateState = getContext('updateState');\n  let audio;\n  \n  onMount(() => {\n\t\taudio.play();\n  });\n  \n  $: cols = tiles[0].length;\n  $: rows = tiles.length;\n</script>\n\n<div class=\"congrats\">\n  <div class=\"congrats-star\" />\n  <div class=\"congrats-header\">\n    You did it!\n  </div>\n  <audio src=\"build/win.ogg\" bind:this={audio} />\n  <div class=\"congrats-controls\">\n    <a\n      href=\"#\"\n      alt=\"Play again!\"\n      on:click={() => updateState('updateSize', rows, cols)}\n    >\n      Play again!\n    </a>\n  </div>\n</div>\n\n<style>\n  .congrats {\n    overflow: hidden;\n    text-align: center;\n  }\n\n  .congrats-star {\n    background: url('star.svg') no-repeat center center;\n    background-size: contain;\n    height: 60vh;\n    width: 60vw;\n    margin: 0 auto;\n  }\n\n  .congrats-header {\n    font-size: 5vw;    \n    margin-top: 3vh;\n    text-align: center;\n  }\n\n  .congrats-controls {\n    margin-top: 3vh;\n  }\n\n  .congrats a {\n    color: white;\n    font-size: 2vw; \n  }\n</style>","<script>\n  import { getContext } from \"svelte\";\n\n  export let direction = 0;\n  export let update = [];\n  export let rows;\n  export let cols;\n  export let shuffle = false;\n\n  let updateState = getContext(\"updateState\");\n\n  $: updateRows = update[0] === \"rows\";\n  $: updateCols = update[0] === \"cols\";\n  $: direction = update[1];\n</script>\n\n<svg\n  class=\"btn\"\n  viewBox=\"0 0 24 24\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  on:click={() => {\n    const nextRows = shuffle ? rows : Math.max(2, rows + (updateRows ? direction : 0));\n    const nextCols = shuffle ? cols : Math.max(2, cols + (updateCols ? direction : 0));\n    updateState('updateSize', nextRows, nextCols);\n  }}>\n  {#if shuffle}\n    <circle cx=\"12\" cy=\"12\" fill=\"#0dad8a\" r=\"11\" />\n    <g fill=\"#fff\">\n      <path\n        d=\"M6.59 9.49h2.43c.51 0 .97.27 1.29.68.22-.4.5-.8.82-1.15a2.95 2.95 0\n        00-2.11-.93H6.59a.7.7 0 100 1.4zm5.34 2.15c.38-1.15 1.56-2.15\n        2.53-2.15h1.28l-.9.89a.7.7 0 10.97.98L18.4 8.8l-2.57-2.57a.7.7 0\n        10-.98.98l.9.9h-1.28c-1.58 0-3.27 1.36-3.85 3.1l-.33.99c-.45 1.33-1.44\n        2.15-1.95 2.15H6.58a.7.7 0 100 1.4h1.75c1.28 0 2.69-1.34\n        3.28-3.12l.32-.98z\" />\n      <path\n        d=\"M15 12.47a.7.7 0 000 .98l.9.9h-1.63a2 2 0 01-1.88-1.47 6.36 6.36 0\n        01-.75 1.52 3.3 3.3 0 002.63 1.34h1.62l-.9.89a.7.7 0\n        10.98.98l2.58-2.57-2.57-2.57a.7.7 0 00-.99 0z\" />\n    </g>\n  {:else}\n    <circle\n      cx=\"12\"\n      cy=\"12\"\n      fill=\"#fff\"\n      fill-opacity=\"0.1\"\n      r=\"11\"\n      stroke-width=\"0.5\"\n      stroke=\"#fff\" />\n    <text\n      text-anchor=\"middle\"\n      font-size=\"9\"\n      font-weight=\"bold\"\n      transform={`translate(12, 15.5)`}\n      fill=\"#fff\">\n      {direction > 0 ? '+' : '-'}\n    </text>\n  {/if}\n</svg>\n\n<style>\n  .btn {\n    cursor: pointer;\n    margin-left: 1rem;\n    height: 3rem;\n    width: 3rem;\n    transition: all 0.2s;\n    opacity: 0.6;\n  }\n\n  @media all and (max-width: 768px) {\n    .btn {\n      height: 2rem;\n      width: 2rem;\n      margin-left: 0.3rem;\n    }\n  }\n\n  @media (pointer: fine) {\n    .btn:hover {\n      opacity: 1;\n    }\n  }\n\n  @media (pointer: coarse) {\n    .btn:active {\n      opacity: 1;\n    }\n  }\n</style>\n","export function clone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nexport function sequence(a, b) {\n  return Array.from({ length: Math.abs(a - b) }, (v, k) => a + (k * (a > b ? -1 : 1)));\n}\n\nexport function random(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function find(arr, n) {\n  const row = arr.findIndex(row => row.indexOf(n) > -1);\n  const col = arr[row].indexOf(n);\n\n  return [row, col];\n}\n\nexport function move(tiles, targetTile) {\n  const [emptyTileRow, emptyTileCol] = find(tiles, 0);\n  const [targetTileRow, targetTileCol] = find(tiles, targetTile);\n  let moves = 0;\n\n  if (emptyTileRow !== targetTileRow && emptyTileCol !== targetTileCol) return [tiles, moves];\n\n  if (emptyTileRow === targetTileRow) {\n    const direction = emptyTileCol < targetTileCol ? 1 : -1;\n    sequence(emptyTileCol, targetTileCol).forEach((col) => {\n      [tiles[emptyTileRow][col], tiles[emptyTileRow][col + direction]] = [tiles[emptyTileRow][col + direction], tiles[emptyTileRow][col]];\n      moves += 1;\n    });\n  } else {\n    const direction = emptyTileRow < targetTileRow ? 1 : -1;\n    sequence(emptyTileRow, targetTileRow).forEach((row) => {\n      [tiles[row][emptyTileCol], tiles[row + direction][emptyTileCol]] = [tiles[row + direction][emptyTileCol], tiles[row][emptyTileCol]];\n      moves += 1;\n    });\n  }\n\n  return [tiles, moves];\n}\n\nexport function randomMove(tiles, direction = Math.round(Math.random())) {\n  const [emptyTileRow, emptyTileCol] = find(tiles, 0);\n  let randomTile = direction === 0\n    ? random(tiles[emptyTileRow].filter(n => n !== 0))\n    : random(tiles.map((row) => row[emptyTileCol]).filter(Boolean));\n\n  return move(tiles, randomTile);\n}\n\nexport function generateTiles(rows, cols) {\n  const tiles = [];\n  \n  for (let y = 0; y < rows; y++) {\n    tiles.push(Array.from({ length: cols }, (v, k) => k + cols * y + 1));\n  }\n\n  tiles[rows-1][cols-1] = 0;\n\n  return tiles;\n}\n\nexport function shuffleBoard(tiles) {\n  for (let i = 0; i < tiles.length * tiles[0].length ** 2; i++) {\n    randomMove(tiles);\n  }\n\n  return getIsComlete(tiles) ? randomMove(tiles)[0] : tiles;\n}\n\nexport function getIsComlete(tiles, rows = tiles.length, cols = tiles[0].length) {\n  for (let y = 0, i = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      i++;\n      if (tiles[y][x] === 0 && i === rows * cols) return true;\n      if (tiles[y][x] !== i) return false;\n    }\n  }\n\n  return true;\n}\n\nexport const getTime = (seconds) => {\n  const h = Math.floor(seconds / 3600);\n  const m = Math.floor((seconds - h * 3600) / 60);\n  const s = seconds % 60;\n  return [h, m, s].map(c => String(c).padStart(2, '0')).join(':');\n}\n","<script>\n  import { getContext } from 'svelte';\n  import ControlsButton from './ControlsButton.svelte';\n  import { find } from './helpers';\n  \n  export let tiles;\n  let updateState = getContext('updateState');\n\n  $: cols = tiles[0].length;\n  $: rows = tiles.length;\n\n  const handleKeyDown = ({ keyCode }) => {\n    const [row, col] = find(tiles, 0);\n    let tile;\n\n    if (keyCode === 37 && (col < cols - 1)) { // LEFT\n      tile = tiles[row][col + 1];\n    } else if (keyCode === 38 && (row < rows - 1)) { // UP\n      tile = tiles[row + 1][col];\n    } else if (keyCode === 39 && col > 0) { // RIGHT\n      tile = tiles[row][col - 1];\n    } else if (keyCode === 40 && row > 0) { // DOWN\n      tile = tiles[row - 1][col];\n    }\n\n    if (tile) updateState('move', tile);\n  };\n</script>\n\n<svelte:window on:keydown={handleKeyDown}/>\n\n<div class=\"controls\">\n  <div class=\"rows-controls\">\n    Rows\n    <ControlsButton {cols} {rows} update={[ 'rows', -1 ]} />\n    <ControlsButton {cols} {rows} update={[ 'rows', +1 ]} />\n  </div>\n  <div class=\"cols-controls\">\n    Columns\n    <ControlsButton {cols} {rows} update={[ 'cols', -1 ]} />\n    <ControlsButton {cols} {rows} update={[ 'cols', +1 ]} />\n  </div>\n  <div class=\"aside-controls\">\n    <ControlsButton {cols} {rows} shuffle />\n  </div>\n</div>\n\n<style>\n  .controls {\n    display: flex;\n    flex: 0 0 4rem;\n    font-size: 1.125rem;\n    padding-top: 1rem;\n  }\n\n  .controls > div {\n    padding: 0 1rem;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .controls .rows-controls {\n    flex: 1 0 auto;\n    justify-content: flex-end;\n    padding-left: 4rem;\n  }\n\n  .controls .cols-controls {\n    flex: 1 0 auto;\n  }\n\n  .controls .aside-controls {\n    flex: 0 1 auto;\n  }\n\n\n  @media all and (max-width: 768px) {\n    .controls {\n      font-size: 1rem;\n    }\n\n    .controls > div {\n      padding: 0 .25rem;\n    }\n\n    .controls > div:first-child {\n      padding-left: 1rem;\n    }\n\n    .controls > div:last-child {\n      padding-right: 1rem;\n    }\n  }\n</style>","<script>\n  import { getContext, onMount } from 'svelte';\n  import { getTime } from './helpers';\n  \n  export let moveId;\n  export let gameId;\n  \n  let seconds;\n  let previousGameId;\n  let interval;\n\n  const resetInterval = () => {\n    clearInterval(interval);\n\n\t  interval = setInterval(() => {\n\t\t\tseconds +=1\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n  }\n\n  onMount(resetInterval);\n  \n  $: {\n     if (previousGameId !== gameId) {\n       seconds = 0;\n       previousGameId = gameId;\n       resetInterval();\n     }\n  }\n  $: time = getTime(seconds);\n</script>\n\n<div class=\"stats\">\n  <span>Move: {moveId}</span> \n  <span>Time: {time}</span>\n</div>\n\n<style>\n  .stats {\n    flex: 0 0 4rem;\n    font-size: 1.125rem;\n    text-align: center;\n  }\n\n  span {\n    padding: 0 1rem;\n  }\n\n  @media all and (max-width: 768px) {\n    .stats {\n      font-size: 1rem;\n    }\n  }\n</style>","<script>\n  import { setContext } from 'svelte';\n  import Board from \"./Board.svelte\";\n  import Congrats from \"./Congrats.svelte\";\n  import Controls from \"./Controls.svelte\";\n  import {\n    generateTiles,\n    getIsComlete,\n    move,\n    shuffleBoard\n  } from \"./helpers.js\";\n  import Stats from \"./Stats.svelte\";\n\n  let moveId = 0;\n  let gameId = Symbol('gameId');\n\n  export let tiles = shuffleBoard(generateTiles(4, 4));\n  export let updateState = (action, ...params) => {\n    switch (action) {\n      case \"move\": {\n        const [tile] = params;\n        let count = 0;\n        [tiles, count] = move(tiles, tile);\n        moveId += count;\n        break;\n      }\n      case \"updateSize\": {\n        const [rows, cols] = params;\n        tiles = shuffleBoard(generateTiles(rows, cols));\n        moveId = 0;\n        gameId = Symbol('gameId');\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  setContext('updateState', updateState);\n\n  $: isComplete = getIsComlete(tiles);\n  $: document.title = `${tiles[0].length * tiles.length - 1}-puzzle`;\n</script>\n\n<main id=\"root\">\n  {#if isComplete}\n    <Congrats {tiles} />\n  {:else}\n    <Controls {tiles} />\n    <Board {tiles} />\n    <Stats {moveId} {gameId} />\n  {/if}\n</main>\n\n<style>\n  /* PALLETE\n\t\tdark-primary-color:     #303F9F;\n\t\tdefault-primary-color:  #3F51B5;\n\t\tlight-primary-color:    #C5CAE9;\n\t\taccent-color:           #44b39b;\n\t\tdivider-color:          #B6B6B6\n\t*/\n\n  main {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","current_component","set_current_component","component","get_current_component","Error","onMount","$$","on_mount","push","getContext","key","context","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","create_component","mount_component","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","Map","callbacks","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","iterations","tiles","updateState","getSortedTiles","sortedTiles","rowTiles","y","number","x","cols","rows","tileName","audio","play","direction","shuffle","updateRows","updateCols","nextRows","Math","max","nextCols","sequence","abs","v","k","random","arr","floor","find","n","row","findIndex","move","targetTile","emptyTileRow","emptyTileCol","targetTileRow","targetTileCol","moves","col","randomMove","round","randomTile","Boolean","generateTiles","shuffleBoard","getIsComlete","keyCode","tile","seconds","previousGameId","interval","moveId","gameId","resetInterval","clearInterval","setInterval","time","h","String","padStart","join","getTime","r","Symbol","action","params","count","set","isComplete","title","body"],"mappings":"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"}